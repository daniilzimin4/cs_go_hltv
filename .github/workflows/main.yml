name: CI/CD

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  deploy:
    runs-on: ubuntu-latest

    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: daniilzimin4/cs_go_hltv_bot:latest

    - name: SSH Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # Получите идентификатор контейнера, запущенного в предыдущем деплое
          PREVIOUS_CONTAINER_ID=$(docker ps -q -f ancestor=daniilzimin4/cs_go_hltv_bot:latest)

          # Проверьте, что переменная PREVIOUS_CONTAINER_ID не пуста
          if [ -n "$PREVIOUS_CONTAINER_ID" ]; then
            # Остановите контейнер
            docker stop $PREVIOUS_CONTAINER_ID
          else
            echo "No previous container found."
          fi

          # Затем запустите новый контейнер
          docker pull daniilzimin4/cs_go_hltv_bot:latest
          docker run -d -p 8443:8443 \
              -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
              -v /root/data.db:/main/data.db \
              daniilzimin4/cs_go_hltv_bot:latest
